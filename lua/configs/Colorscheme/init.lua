local status_ok, nightfox = pcall(require, "nightfox")
if not status_ok then
	return
end

local c = {
  red = "#FF2442",
  blue = "#2F2EFF",
  cyan = "#00FFE2",
  grey = "#323641",
  pink = "#FC92E3",
  teal = "#00C897",
  black = "#17191E",
  green = "#00FF00",
  white = "#F7F7F7",
  orange = "#F98404",
  yellow = "#F7FD04",
  purple = "#A824FF",
  magenta = "#E900FF",
  lightgrey = "#60728a",
  lightblue = "#00B4FF",
  lightcyan = "#B8FFF9",
}

nightfox.setup({
	options = {
		terminal_colors = false,
		dim_inactive = true,
		modules = {
			cmp = true,
			diagnostic = true,
			lsp_trouble = true,
			gitsigns = true,
			modes = true,
			native_lsp = true,
			nvimtree = true,
			telescope = true,
			treesitter = true,
			whichkey = true,
		},
	},
	palettes = {
		nightfox = {
			-- bg0 = "#282c34",
			-- bg1 = "#000000",
			-- bg2 = "#393f4a",
			-- bg3 = "#3b3f4c",
			-- bg4 = "#21252b",
			-- fg0 = "#abb2bf",
			-- fg1 = "#abb2bf",
			-- fg2 = "#abb2bf",
			-- fg3 = "#abb2bf",
			-- sel0 = "#abb2bf",
			-- sel1 = "#abb2bf",
			comment = "#60728a",
			red = { base = "#FF2442", bright = "#FF2442", dim = "#FF2442" },
			blue = { base = "#503BFF", bright = "#503BFF", dim = "#503BFF" },
			cyan = { base = "#1FFFFF", bright = "#1FFFFF", dim = "#1FFFFF" },
			grey = { base = "#323641", bright = "#323641", dim = "#323641" },
			pink = { base = "#FC92E3", bright = "#FC92E3", dim = "#FC92E3" },
			black = { base = "#17191E", bright = "#17191E", dim = "#17191E" },
			white = { base = "#F7F7F7", bright = "#F7F7F7", dim = "#F7F7F7" },
			green = { base = "#49FF00", bright = "#49FF00", dim = "#49FF00" },
			orange = { base = "#F98404", bright = "#F98404", dim = "#F98404" },
			yellow = { base = "#F7FD04", bright = "#F7FD04", dim = "#F7FD04" },
			magenta = { base = "#E900FF", bright = "#E900FF", dim = "#E900FF" },
		},
	},
	specs = {
		nightfox = {
			syntax = {
				bracket = "#60728a",
			},
		},
	},
	groups = {
    gitconfigSection           = { fg = c.magenta },
    gitconfigVariable          = { fg = c.cyan },
    gitconfigAssignment        = { fg = c.lightcyan },
    dosiniHeader               = { fg = c.magenta },
    dosiniNumber               = { fg = c.orange },
    dosiniLabel                = { fg = c.cyan },
    dosiniValue                = { fg = c.lightcyan },
		IndentBlankLineContextChar = { fg = "#1FFFFF" },
    -- TSAttribute                = { fg =  },
    -- TSBoolean                  = { fg =  },
    -- TSCharacter                = { fg =  },
    TSComment                  = { fg = c.lightgrey },
    -- TSConditional              = { fg =  },
    -- TSConstant                 = { fg =  },
    -- TSConstBuiltin             = { fg =  },
    -- TSConstMacro               = { fg =  },
    -- TSConstructor              = { fg =  },
    -- TSError                    = { fg =  },
    -- TSException                = { fg =  },
    TSField                    = { fg = c.cyan },
    -- TSFloat                    = { fg =  },
    -- TSFunction                 = { fg =  },
    -- TSFuncBuiltin              = { fg =  },
    -- TSFuncMacro                = { fg =  },
    -- TSInclude                  = { fg =  },
    -- TSKeyword                  = { fg =  },
    -- TSKeywordFunction          = { fg =  },
    -- TSKeywordOperator          = { fg =  },
    -- TSKeywordReturn            = { fg =  },
    -- TSLabel                    = { fg =  },
    -- TSMethod                   = { fg =  },
    -- TSNamespace                = { fg =  },
    -- TSNone                     = { fg =  },
    -- TSNumber                   = { fg =  },
    -- TSOperator                 = { fg =  },
    -- TSParameter                = { fg =  },
    -- TSParameterReference       = { fg =  },
    -- TSProperty                 = { fg =  },
    -- TSPunctDelimiter           = { fg =  },
    -- TSPunctBracket             = { fg =  },
    -- TSPunctSpecial             = { fg =  },
    -- TSRepeat                   = { fg =  },
    TSString                   = { fg = c.lightcyan },
    -- TSStringRegex              = { fg =  },
    -- TSStringEscape             = { fg =  },
    -- TSStringSpecial            = { fg =  },
    -- TSSymbol                   = { fg =  },
    -- TSTag                      = { fg =  },
    -- TSTagAttribute             = { fg =  },
    -- TSTagDelimiter             = { fg =  },
    -- TSText                     = { fg =  },
    -- TSStrong                   = { fg =  },
    -- TSEmphasis                 = { fg =  },
    -- TSUnderline                = { fg =  },
    -- TSStrike                   = { fg =  },
    -- TSTitle                    = { fg =  },
    -- TSLiteral                  = { fg =  },
    -- TSURI                      = { fg =  },
    -- TSMath                     = { fg =  },
    -- TSTextReference            = { fg =  },
    -- TSEnvironment              = { fg =  },
    -- TSEnvironmentName          = { fg =  },
    -- TSNote                     = { fg =  },
    -- TSWarning                  = { fg =  },
    -- TSDanger                   = { fg =  },
    -- TSType                     = { fg =  },
    -- TSTypeBuiltin              = { fg =  },
    TSVariable                 = { fg = c.white },
    -- TSVariableBuiltin          = { fg =  },
    -- Copilot
    CopilotSuggestion          = { fg = c.lightgrey },
    -- Lua
    luaTSComment                 = { fg = c.lightgrey },
    luaTSField                   = { fg = c.cyan },
    luaTSFunction                = { fg = c.lightblue },
    luaTSVariable                = { fg = c.white },
	},
})

local colorscheme = "nightfox"

local status_ok, _ = pcall(vim.cmd, "colorscheme " .. colorscheme)
if not status_ok then
	vim.notify("colorscheme [" .. colorscheme .. "] Not found!")
	return
end
